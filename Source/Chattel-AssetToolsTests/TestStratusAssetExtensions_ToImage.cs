// ChattelAssetToolsTests.cs
//
// Author:
//       Ricky Curtice <ricky@rwcproductions.com>
//
// Copyright (c) 2017 
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using NUnit.Framework;
using System;
using InWorldz.Data.Assets.Stratus;
using ChattelAssetTools;
using System.Drawing;
using System.IO;

namespace ChattelAssetToolsTests {
	[TestFixture]
	public class TestStratusAssetExtensions_ToImage {
		#region Test image data

		public static readonly byte[] JPEG_DATA = { // Smallest 1x1px JPEG I could make with GIMP.
			0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01,
			0x01, 0x01, 0x00, 0x48, 0x00, 0x48, 0x00, 0x00, 0xff, 0xdb, 0x00, 0x43,
			0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdb, 0x00, 0x43, 0x01, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xc0, 0x00, 0x11, 0x08, 0x00, 0x01, 0x00, 0x01, 0x03,
			0x01, 0x11, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xff, 0xc4, 0x00,
			0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc4, 0x00, 0x14, 0x10,
			0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc4, 0x00, 0x14, 0x01, 0x01, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0xff, 0xc4, 0x00, 0x14, 0x11, 0x01, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0xff, 0xda, 0x00, 0x0c, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11,
			0x00, 0x3f, 0x00, 0x40, 0x7f, 0xff, 0xd9
		};

		public static readonly byte[] JPEG2000_DATA = { // Same as JPEG_DATA, but converted to JPEG200 via ImageMagick.
			0x00, 0x00, 0x00, 0x0c, 0x6a, 0x50, 0x20, 0x20, 0x0d, 0x0a, 0x87, 0x0a,
			0x00, 0x00, 0x00, 0x14, 0x66, 0x74, 0x79, 0x70, 0x6a, 0x70, 0x32, 0x20,
			0x00, 0x00, 0x00, 0x00, 0x6a, 0x70, 0x32, 0x20, 0x00, 0x00, 0x00, 0x2d,
			0x6a, 0x70, 0x32, 0x68, 0x00, 0x00, 0x00, 0x16, 0x69, 0x68, 0x64, 0x72,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x07, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x63, 0x6f, 0x6c, 0x72, 0x01, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x6a, 0x70, 0x32,
			0x63, 0xff, 0x4f, 0xff, 0x51, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x01, 0x01, 0x07, 0x01,
			0x01, 0x07, 0x01, 0x01, 0xff, 0x64, 0x00, 0x23, 0x00, 0x01, 0x43, 0x72,
			0x65, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0x20, 0x4a, 0x61, 0x73, 0x50, 0x65,
			0x72, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x31, 0x2e,
			0x39, 0x30, 0x30, 0x2e, 0x31, 0xff, 0x52, 0x00, 0x0c, 0x00, 0x00, 0x00,
			0x01, 0x01, 0x05, 0x04, 0x04, 0x00, 0x01, 0xff, 0x5c, 0x00, 0x13, 0x40,
			0x40, 0x48, 0x48, 0x50, 0x48, 0x48, 0x50, 0x48, 0x48, 0x50, 0x48, 0x48,
			0x50, 0x48, 0x48, 0x50, 0xff, 0x5d, 0x00, 0x14, 0x01, 0x40, 0x40, 0x48,
			0x48, 0x50, 0x48, 0x48, 0x50, 0x48, 0x48, 0x50, 0x48, 0x48, 0x50, 0x48,
			0x48, 0x50, 0xff, 0x5d, 0x00, 0x14, 0x02, 0x40, 0x40, 0x48, 0x48, 0x50,
			0x48, 0x48, 0x50, 0x48, 0x48, 0x50, 0x48, 0x48, 0x50, 0x48, 0x48, 0x50,
			0xff, 0x90, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x00, 0x01,
			0xff, 0x5d, 0x00, 0x14, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x5d,
			0x00, 0x14, 0x01, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x5d, 0x00, 0x14,
			0x02, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x93, 0xcf, 0xb4, 0x04, 0x00,
			0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
			0x80, 0x80, 0x80, 0x80, 0x80, 0xff, 0xd9
		};

		public static readonly byte[] TGA_DATA = { // Same as JPEG_DATA, but converted to TGA via ImageMagick.
			0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x01, 0x00, 0x01, 0x00, 0x08, 0x00, 0xff
		};

		#endregion

		[OneTimeSetUp]
		public void SetupOnce() {
			CSJ2K.Util.BitmapImageCreator.Register();
		}

		#region Texture to Bitmap

		[Test]
		public void TestStatusAsset_ToImage_Bitmap_TextureEmpty() {
			var asset = new StratusAsset {
				Type = 0,
				Data = new byte[] { },
			};

			Assert.IsNull(asset.ToImage<Bitmap>());
		}

		[Test]
		public void TestStatusAsset_ToImage_Bitmap_TextureNull() {
			var asset = new StratusAsset {
				Type = 0,
				Data = null,
			};

			Assert.IsNull(asset.ToImage<Bitmap>());
		}

		[Test]
		public void TestStatusAsset_ToImage_Bitmap_Texture() {
			var data = new byte[JPEG2000_DATA.Length];
			Array.Copy(JPEG2000_DATA, data, JPEG2000_DATA.Length);

			var asset = new StratusAsset {
				Type = 0,
				Data = data,
			};

			var img = asset.ToImage<Bitmap>();
			Assert.IsNotNull(img);
		}

		#endregion

		#region ImageJPEG to Bitmap

		[Test]
		public void TestStatusAsset_ToImage_Bitmap_ImageJPEGEmpty() {
			var asset = new StratusAsset {
				Type = 19,
				Data = new byte[] { },
			};

			Assert.IsNull(asset.ToImage<Bitmap>());
		}

		[Test]
		public void TestStatusAsset_ToImage_Bitmap_ImageJPEGNull() {
			var asset = new StratusAsset {
				Type = 19,
				Data = null,
			};

			Assert.IsNull(asset.ToImage<Bitmap>());
		}

		[Test]
		public void TestStatusAsset_ToImage_Bitmap_ImageJPEG() {
			var data = new byte[JPEG_DATA.Length];
			Array.Copy(JPEG_DATA, data, JPEG_DATA.Length);

			var asset = new StratusAsset {
				Type = 19,
				Data = data,
			};

			var img = asset.ToImage<Bitmap>();
			Assert.IsNotNull(img);
		}

		#endregion

		#region ImageTGA to Bitmap

		[Test]
		public void TestStatusAsset_ToImage_Bitmap_ImageTGAEmpty() {
			var asset = new StratusAsset {
				Type = 18,
				Data = new byte[] { },
			};

			Assert.IsNull(asset.ToImage<Bitmap>());
		}

		[Test]
		public void TestStatusAsset_ToImage_Bitmap_ImageTGANull() {
			var asset = new StratusAsset {
				Type = 18,
				Data = null,
			};

			Assert.IsNull(asset.ToImage<Bitmap>());
		}

		//[Test] No TGA processor as yet.
		public void TestStatusAsset_ToImage_Bitmap_ImageTGA() {
			var data = new byte[TGA_DATA.Length];
			Array.Copy(TGA_DATA, data, TGA_DATA.Length);

			var asset = new StratusAsset {
				Type = 18,
				Data = data,
			};

			var img = asset.ToImage<Bitmap>();
			Assert.IsNotNull(img);
		}

		#endregion

		#region TextureTGA to Bitmap

		[Test]
		public void TestStatusAsset_ToImage_Bitmap_TextureTGAEmpty() {
			var asset = new StratusAsset {
				Type = 18,
				Data = new byte[] { },
			};

			Assert.IsNull(asset.ToImage<Bitmap>());
		}

		[Test]
		public void TestStatusAsset_ToImage_Bitmap_TextureTGANull() {
			var asset = new StratusAsset {
				Type = 18,
				Data = null,
			};

			Assert.IsNull(asset.ToImage<Bitmap>());
		}

		//[Test] No TGA processor as yet.
		public void TestStatusAsset_ToImage_Bitmap_TextureTGA() {
			var data = new byte[TGA_DATA.Length];
			Array.Copy(TGA_DATA, data, TGA_DATA.Length);

			var asset = new StratusAsset {
				Type = 18,
				Data = data,
			};

			var img = asset.ToImage<Bitmap>();
			Assert.IsNotNull(img);
		}

		#endregion
	}
}
